Index: class/validator.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace app\\class ;\r\n\r\nclass Validator\r\n{\r\n    /**\r\n     * Valider le nom ou le prénom\r\n     * @param string $name Le nom du champ\r\n     * @param string $value La valeur à valider\r\n     * @return bool|string True si la valeur est valide, sinon le message d'erreur\r\n     */\r\n    public function checkName(string $name, string $value): bool|string\r\n    {\r\n        $value =  trim($value) ;\r\n\r\n        // Vérifier la variable vide\r\n        if (empty($value) ) {\r\n            return \"Le champ $name est requis.\";\r\n        }\r\n        // Vérifier la longueur\r\n        if (strlen($value) < 1 || strlen($value) > 100 ) {\r\n            return \"La longueur du $name est incorrecte. Le $name doit comporter entre 2 et 50 caractères.\";\r\n        }\r\n        // Vérifier les caractères spéciaux\r\n        if (!preg_match('/^[a-zA-ZÀ-ÿ\\s\\'\\-]+$/', $value)) {\r\n            return \"Le $name contient des caractères spéciaux non autorisés.\";\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Valider l'adresse email\r\n     * @param string $value La valeur à valider\r\n     * @return bool|string True si la valeur est valide, sinon le message d'erreur\r\n     */\r\n    public function checkEmail(string $value): bool|string\r\n    {\r\n        // Vérifier la variable vide\r\n        if (empty($value)) {\r\n            return \"Le champ adresse email est requis.\";\r\n        }\r\n        // Vérifier la validité de l'adresse email\r\n        if (!filter_var($value, FILTER_VALIDATE_EMAIL)) {\r\n            return \"L'adresse email est invalide.\";\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Valider le mot de passe\r\n     * @param string $value La valeur à valider\r\n     * @return bool|string True si la valeur est valide, sinon le message d'erreur\r\n     */\r\n    public function checkPass(string $value): bool|string\r\n    {\r\n        // Vérifier la variable vide\r\n        if (empty($value)) {\r\n            return \"Le champ mot de passe est requis.\";\r\n        }\r\n        // Vérifier la longueur\r\n        if (strlen($value) < 16) {\r\n            return \"La longueur du mot de passe est incorrecte. Le mot de passe doit comporter au moins 16 caractères.\";\r\n        }\r\n        // Vérifier les caractères requis\r\n        if (!preg_match('/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$&_\\-^%])[A-Za-z\\d@$&_\\-^%]{16,}$/', $value)) {\r\n            return \"Le mot de passe est invalide. Il doit contenir au moins 16 caractères, dont une majuscule, une minuscule, un chiffre et un caractère spécial.\";\r\n        }\r\n        return true;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/class/validator.php b/class/validator.php
--- a/class/validator.php	(revision 07042a576c940150d5d8b0dafe7d2532252ec46b)
+++ b/class/validator.php	(date 1686314419313)
@@ -1,72 +1,70 @@
 <?php
 
-namespace app\class ;
 
-class Validator
-{
-    /**
-     * Valider le nom ou le prénom
-     * @param string $name Le nom du champ
-     * @param string $value La valeur à valider
-     * @return bool|string True si la valeur est valide, sinon le message d'erreur
-     */
-    public function checkName(string $name, string $value): bool|string
-    {
-        $value =  trim($value) ;
+/**
+ * Valider le nom ou le prénom
+ * @param string $name Le nom du champ
+ * @param string $value La valeur à valider
+ * @return bool|string True si la valeur est valide, sinon le message d'erreur
+ */
+
+function checkName(string $name, string $value): bool|string
+{
+    $value = trim($value);
 
-        // Vérifier la variable vide
-        if (empty($value) ) {
-            return "Le champ $name est requis.";
-        }
-        // Vérifier la longueur
-        if (strlen($value) < 1 || strlen($value) > 100 ) {
-            return "La longueur du $name est incorrecte. Le $name doit comporter entre 2 et 50 caractères.";
-        }
-        // Vérifier les caractères spéciaux
-        if (!preg_match('/^[a-zA-ZÀ-ÿ\s\'\-]+$/', $value)) {
-            return "Le $name contient des caractères spéciaux non autorisés.";
-        }
+    // Vérifier la variable vide
+    if (empty($value)) {
+        return "Le champ $name est requis.";
+    }
+    // Vérifier la longueur
+    if (strlen($value) < 1 || strlen($value) > 100) {
+        return "La longueur du $name est incorrecte. Le $name doit comporter entre 2 et 50 caractères.";
+    }
+    // Vérifier les caractères spéciaux
+    if (!preg_match('/^[a-zA-ZÀ-ÿ\s\'\-]+$/', $value)) {
+        return "Le $name contient des caractères spéciaux non autorisés.";
+    }
 
-        return true;
-    }
+    return true;
+}
 
-    /**
-     * Valider l'adresse email
-     * @param string $value La valeur à valider
-     * @return bool|string True si la valeur est valide, sinon le message d'erreur
-     */
-    public function checkEmail(string $value): bool|string
-    {
-        // Vérifier la variable vide
-        if (empty($value)) {
-            return "Le champ adresse email est requis.";
-        }
-        // Vérifier la validité de l'adresse email
-        if (!filter_var($value, FILTER_VALIDATE_EMAIL)) {
-            return "L'adresse email est invalide.";
-        }
-        return true;
-    }
+/**
+ * Valider l'adresse email
+ * @param string $value La valeur à valider
+ * @return bool|string True si la valeur est valide, sinon le message d'erreur
+ */
+
+function checkEmail(string $value): bool|string
+{
+    // Vérifier la variable vide
+    if (empty($value)) {
+        return "Le champ adresse email est requis.";
+    }
+    // Vérifier la validité de l'adresse email
+    if (!filter_var($value, FILTER_VALIDATE_EMAIL)) {
+        return "L'adresse email est invalide.";
+    }
+    return true;
+}
 
-    /**
-     * Valider le mot de passe
-     * @param string $value La valeur à valider
-     * @return bool|string True si la valeur est valide, sinon le message d'erreur
-     */
-    public function checkPass(string $value): bool|string
-    {
-        // Vérifier la variable vide
-        if (empty($value)) {
-            return "Le champ mot de passe est requis.";
-        }
-        // Vérifier la longueur
-        if (strlen($value) < 16) {
-            return "La longueur du mot de passe est incorrecte. Le mot de passe doit comporter au moins 16 caractères.";
-        }
-        // Vérifier les caractères requis
-        if (!preg_match('/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$&_\-^%])[A-Za-z\d@$&_\-^%]{16,}$/', $value)) {
-            return "Le mot de passe est invalide. Il doit contenir au moins 16 caractères, dont une majuscule, une minuscule, un chiffre et un caractère spécial.";
-        }
-        return true;
-    }
-}
\ No newline at end of file
+/**
+ * Valider le mot de passe
+ * @param string $value La valeur à valider
+ * @return bool|string True si la valeur est valide, sinon le message d'erreur
+ */
+function checkPass(string $value): bool|string
+{
+    // Vérifier la variable vide
+    if (empty($value)) {
+        return "Le champ mot de passe est requis.";
+    }
+    // Vérifier la longueur
+    if (strlen($value) < 16) {
+        return "La longueur du mot de passe est incorrecte. Le mot de passe doit comporter au moins 16 caractères.";
+    }
+    // Vérifier les caractères requis
+    if (!preg_match('/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$&_\-^%])[A-Za-z\d@$&_\-^%]{16,}$/', $value)) {
+        return "Le mot de passe est invalide. Il doit contenir au moins 16 caractères, dont une majuscule, une minuscule, un chiffre et un caractère spécial.";
+    }
+    return true;
+}
